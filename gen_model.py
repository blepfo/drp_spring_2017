
import tensorflow as tf
import numpy as np
from math import floor
from math import sqrt
from matplotlib import pyplot as plt
from matplotlib.gridspec import GridSpec

class Gen_Model:
	"""
	Every generative model must have:
		self.latent_samples: TF placeholder to input latent samples
		self.generated: Tensor output generated by the model
	
	Generative model must override __init__() and implement train() 
	"""

	def __init__(self, name):
		self.name = name
		
	def begin_session(self):
		self.sess = tf.InteractiveSession(graph=self.graph)
		self.sess.run(tf.global_variables_initializer())
		
	def save(self, save_dir=None, step=None):
		if save_dir == None:
			save_dir = self.save_dir
		tf.train.Saver().save(self.sess, save_dir, global_step=step)
	
	def restore(self, save_dir=None):
		if save_dir == None:
			save_dir = self.save_dir
		tf.train.Saver().restore(self.sess, save_dir)
		
	def end_session(self):
		self.sess.close()
		self.sess = None	
	
	def __str__(self):
		with self.graph.as_default():
			return "\n".join([var.name for var in tf.trainable_variables()])
		
	def generate(self):
		""" Generate 3 samples and display in a row 
		For now, this is setup to work with generated MNIST samples"""
		samples = np.random.randn(3, self.hidden_dim)
		images = self.sess.run(self.generated, feed_dict={self.latent_samples : samples})
		for i in range(3):
			plt.subplot(1, 3, i + 1)
			plt.imshow(np.reshape(images[i], [28,28]), cmap="Greys")
			plt.axis('off')
		plt.show()
		
	def visualize_latent2D(self, size=81, low=-0.5, high=0.5, save=False, save_dir=None, name=None):
		""" Create a 9x9 grid of images created from a model with a 2D hidden dimension """
		if self.hidden_dim != 2:
			raise Exception("Model needs 2D latent dimension to use visualize_latent2D()")
		# Create images
		latent_samples = np.matrix([[x, y] for x in np.linspace(low, high, size) 
										for y in np.linspace(low, high, size)])
		images = self.sess.run(self.generated, feed_dict={self.latent_samples : latent_samples})
		square_size = floor(sqrt(size))
		fig = plt.figure(figsize=(square_size, square_size))
		for i in range(1, size + 1):
			plt.subplot(square_size, square_size, i)
			plt.imshow(np.reshape(images[i], [28, 28]), cmap="Greys")
			plt.axis('off')
		fig.subplots_adjust(wspace=0, hspace=0)
		if save:
			fig.savefig("%s%s" % (save_dir, name), bbox_inches='tight')
			plt.close()
		else:
			plt.show()
			
			