
import tensorflow as tf
import numpy as np
from matplotlib import pyplot as plt

class Gen_Model:
	"""
	Every generative model must have:
		self.latent_samples: TF placeholder to input latent samples
		self.generated: Tensor output generated by the model
	
	Generative model must override __init__() and implement train() 
	"""

	def __init__(self, name):
		self.name = name
		
	def begin_session(self):
		self.sess = tf.InteractiveSession(graph=self.graph)
		self.sess.run(tf.global_variables_initializer())
		
	def save(self):
		tf.train.Saver().save(self.sess, self.save_dir)
	
	def restore(self):
		tf.train.Saver().restore(self.sess, self.save_dir)
		
	def end_session(self):
		self.sess.close()
		self.sess = None	
	
	def generate(self):
		generate(self)
	
	def __str__(self):
		with self.graph.as_default():
			return "\n".join([var.name for var in tf.trainable_variables()])
		
	def generate(self):
		""" Generate 3 samples and display in a row 
		For now, this is setup to work with generated MNIST samples"""
		samples = np.random.randn(3, self.hidden_dim)
		images = self.sess.run(self.generated, feed_dict={self.latent_samples : samples})
		for i in range(3):
			plt.subplot(1, 3, i + 1)
			plt.imshow(np.reshape(images[i], [28,28]), cmap="Greys")
			plt.axis('off')
		plt.show()